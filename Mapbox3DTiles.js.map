{"version":3,"file":"Mapbox3DTiles.js","sources":["Mapbox3DTiles.mjs"],"sourcesContent":["\nconst MERCATOR_A = 6378137.0;\nconst WORLD_SIZE = MERCATOR_A * Math.PI * 2;\n\nconst ThreeboxConstants = {\n  WORLD_SIZE: WORLD_SIZE,\n  PROJECTION_WORLD_SIZE: WORLD_SIZE / (MERCATOR_A * Math.PI * 2),\n  MERCATOR_A: MERCATOR_A,\n  DEG2RAD: Math.PI / 180,\n  RAD2DEG: 180 / Math.PI,\n  EARTH_CIRCUMFERENCE: 40075000, // In meters\n}\n  \n/* \n  mapbox-gl uses a camera fixed at the orgin (the middle of the canvas) The camera is only updated when rotated (bearing angle), \n  pitched or when the map view is resized.\n  When panning and zooming the map, the desired part of the world is translated and zoomed in front of the camera. The world is only updated when\n  the map is panned or zoomed.\n\n  The mapbox-gl internal coordinate system has origin (0,0) located at longitude -180 degrees and latitude 0 degrees. \n  The scaling is 2^map.getZoom() * 512/EARTH_CIRCUMFERENCE_IN_METERS. At zoom=0 (scale=2^0=1), the whole world fits in 512 units.\n*/\nclass CameraSync {\n  constructor (map, camera, world) {\n    this.map = map;\n    this.camera = camera;\n    this.active = true;\n    this.updateCallback = ()=>{};\n    \n    this.camera.matrixAutoUpdate = false;   // We're in charge of the camera now!\n  \n    // Postion and configure the world group so we can scale it appropriately when the camera zooms\n    this.world = world || new THREE.Group();\n    this.world.position.x = this.world.position.y = ThreeboxConstants.WORLD_SIZE/2;\n    this.world.matrixAutoUpdate = false;\n  \n    //set up basic camera state\n    this.state = {\n      fov: 0.6435011087932844, // Math.atan(0.75);\n      translateCenter: new THREE.Matrix4(),\n      worldSizeRatio: 512/ThreeboxConstants.WORLD_SIZE\n    };\n  \n    this.state.translateCenter.makeTranslation(ThreeboxConstants.WORLD_SIZE/2, -ThreeboxConstants.WORLD_SIZE / 2, 0);\n  \n    // Listen for move events from the map and update the Three.js camera. Some attributes only change when viewport resizes, so update those accordingly\n    this.map.on('move', ()=>this.updateCamera());\n    this.map.on('resize', ()=>this.setupCamera());\n    //this.map.on('moveend', ()=>this.updateCallback())\n\n    this.setupCamera();\n  }\n  setupCamera() {\n    var t = this.map.transform\n    const halfFov = this.state.fov / 2;\n    var cameraToCenterDistance = 0.5 / Math.tan(halfFov) * t.height;\n    \n    this.state.cameraToCenterDistance = cameraToCenterDistance;\n    this.state.cameraTranslateZ = new THREE.Matrix4().makeTranslation(0,0,cameraToCenterDistance);\n  \n    this.updateCamera();\n  }  \n  updateCamera(ev) {\n  \n    if(!this.camera) {\n      console.log('nocamera')\n      return;\n    }\n  \n    var t = this.map.transform\n  \n    var halfFov = this.state.fov / 2;\n    const groundAngle = Math.PI / 2 + t._pitch;\n    this.state.topHalfSurfaceDistance = Math.sin(halfFov) * this.state.cameraToCenterDistance / Math.sin(Math.PI - groundAngle - halfFov);\n  \n    // Calculate z distance of the farthest fragment that should be rendered.\n    const furthestDistance = Math.cos(Math.PI / 2 - t._pitch) * this.state.topHalfSurfaceDistance + this.state.cameraToCenterDistance;\n    \n    // Add a bit extra to avoid precision problems when a fragment's distance is exactly `furthestDistance`\n    const farZ = furthestDistance * 1.01;    \n  \n    this.camera.projectionMatrix = this.makePerspectiveMatrix(this.state.fov, t.width / t.height, 1, farZ);\n    \n  \n    var cameraWorldMatrix = new THREE.Matrix4();\n    var rotatePitch = new THREE.Matrix4().makeRotationX(t._pitch);\n    var rotateBearing = new THREE.Matrix4().makeRotationZ(t.angle);\n  \n    // Unlike the Mapbox GL JS camera, separate camera translation and rotation out into its world matrix\n    // If this is applied directly to the projection matrix, it will work OK but break raycasting\n  \n    cameraWorldMatrix\n      .premultiply(this.state.cameraTranslateZ)\n      .premultiply(rotatePitch)\n      .premultiply(rotateBearing);\n    \n  \n    this.camera.matrixWorld.copy(cameraWorldMatrix);\n    \n    // Handle scaling and translation of objects in the map in the world's matrix transform, not the camera\n    let zoomPow = t.scale * this.state.worldSizeRatio;\n    let scale = new THREE.Matrix4();\n    scale.makeScale( zoomPow, zoomPow, zoomPow );\n    //console.log(`zoomPow: ${zoomPow}`);\n  \n    let translateMap = new THREE.Matrix4();\n    \n    let x = -this.map.transform.x || -this.map.transform.point.x;\n    let y = this.map.transform.y || this.map.transform.point.y;\n    \n    translateMap.makeTranslation(x, y, 0);\n    \n    this.world.matrix = new THREE.Matrix4;\n    this.world.matrix\n      //.premultiply(rotateMap)\n      .premultiply(this.state.translateCenter)\n      .premultiply(scale)\n      .premultiply(translateMap);\n    let matrixWorldInverse = new THREE.Matrix4();\n    matrixWorldInverse.getInverse(this.world.matrix);\n\n    this.camera.projectionMatrixInverse.getInverse(this.camera.projectionMatrix);\n    this.camera.matrixWorldInverse.getInverse(this.camera.matrixWorld);\n    this.frustum = new THREE.Frustum();\n    this.frustum.setFromProjectionMatrix(new THREE.Matrix4().multiplyMatrices(this.camera.projectionMatrix, this.camera.matrixWorldInverse));\n    \n    this.cameraPosition = new THREE.Vector3(0,0,0).unproject(this.camera).applyMatrix4(matrixWorldInverse);\n\n    this.updateCallback();\n  }\n  makePerspectiveMatrix(fovy, aspect, near, far) {\n  \n    let out = new THREE.Matrix4();\n    let f = 1.0 / Math.tan(fovy / 2),\n    nf = 1 / (near - far);\n  \n    let newMatrix = [\n      f / aspect, 0, 0, 0,\n      0, f, 0, 0,\n      0, 0, (far + near) * nf, -1,\n      0, 0, (2 * far * near) * nf, 0\n    ]\n  \n    out.elements = newMatrix\n    return out;\n  }\n}\n\nclass TileSet {\n  constructor(updateCallback){\n    if (!updateCallback) {\n      updateCallback = ()=>{};\n    }\n    this.updateCallback = updateCallback;\n    this.url = null;\n    this.version = null;\n    this.gltfUpAxis = 'Z';\n    this.geometricError = null;\n    this.root = null;\n  }\n  // TileSet.load\n  async load(url, styleParams) {\n    this.url = url;\n    let resourcePath = THREE.LoaderUtils.extractUrlBase(url);\n    \n    let response = await fetch(this.url);\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status} - ${response.statusText}`);\n    }\n    let json = await response.json();    \n    this.version = json.asset.version;\n    this.geometricError = json.geometricError;\n    this.refine = json.root.refine ? json.root.refine.toUpperCase() : 'ADD';\n    this.root = new ThreeDeeTile(json.root, resourcePath, styleParams, this.updateCallback, this.refine);\n    return;\n  }\n}\n\nclass ThreeDeeTile {\n  constructor(json, resourcePath, styleParams, updateCallback, parentRefine, parentTransform) {\n    this.loaded = false;\n    this.styleParams = styleParams;\n    this.updateCallback = updateCallback;\n    this.resourcePath = resourcePath;\n    this.totalContent = new THREE.Group();  // Three JS Object3D Group for this tile and all its children\n    this.tileContent = new THREE.Group();    // Three JS Object3D Group for this tile's content\n    this.childContent = new THREE.Group();    // Three JS Object3D Group for this tile's children\n    this.totalContent.add(this.tileContent);\n    this.totalContent.add(this.childContent);\n    this.boundingVolume = json.boundingVolume;\n    if (this.boundingVolume && this.boundingVolume.box) {\n      let b = this.boundingVolume.box;\n      let extent = [b[0] - b[3], b[1] - b[7], b[0] + b[3], b[1] + b[7]];\n      let sw = new THREE.Vector3(extent[0], extent[1], b[2] - b[11]);\n      let ne = new THREE.Vector3(extent[2], extent[3], b[2] + b[11]);\n      this.box = new THREE.Box3(sw, ne);\n      if (Mapbox3DTiles.DEBUG) {\n        let geom = new THREE.BoxGeometry(b[3] * 2, b[7] * 2, b[11] * 2);\n        let edges = new THREE.EdgesGeometry( geom );\n        this.debugColor = new THREE.Color( 0xffffff );\n        this.debugColor.setHex( Math.random() * 0xffffff );\n        let line = new THREE.LineSegments( edges, new THREE.LineBasicMaterial( {color:this.debugColor }) );\n        let trans = new THREE.Matrix4().makeTranslation(b[0], b[1], b[2]);\n        line.applyMatrix4(trans);\n        this.debugLine = line;\n      }\n    } else {\n      this.extent = null;\n      this.sw = null;\n      this.ne = null;\n      this.box = null;\n      this.center = null;\n    }\n    this.refine = json.refine ? json.refine.toUpperCase() : parentRefine;\n    this.geometricError = json.geometricError;\n    this.worldTransform = parentTransform ? parentTransform.clone() : new THREE.Matrix4();\n    this.transform = json.transform;\n    if (this.transform) \n    { \n      let tileMatrix = new THREE.Matrix4().fromArray(this.transform);\n      this.totalContent.applyMatrix4(tileMatrix);\n      this.worldTransform.multiply(tileMatrix);\n    }\n    this.content = json.content;\n    this.children = [];\n    if (json.children) {\n      for (let i=0; i<json.children.length; i++){\n        let child = new ThreeDeeTile(json.children[i], resourcePath, styleParams, updateCallback, this.refine, this.worldTransform);\n        this.childContent.add(child.totalContent);\n        this.children.push(child);\n      }\n    }\n  }\n  //ThreeDeeTile.load\n  async load() {\n    if (this.unloadedTileContent) {\n      this.totalContent.add(this.tileContent);\n      this.unloadedTileContent = false;\n    }\n    if (this.unloadedChildContent) {\n      this.totalContent.add(this.childContent);\n      this.unloadedChildContent = false;\n    }\n    if (this.unloadedDebugContent) {\n      this.totalContent.add(this.debugLine);\n      this.unloadedDebugContent = false;\n    }\n    if (this.loaded) {\n      this.updateCallback();\n      return;\n    }\n    this.loaded = true;\n    if (this.debugLine) {        \n      this.totalContent.add(this.debugLine);\n    }\n    if (this.content) {\n      let url = this.content.uri ? this.content.uri : this.content.url;\n      if (!url) return;\n      if (url.substr(0, 4) != 'http')\n        url = this.resourcePath + url;\n      let type = url.slice(-4);\n      switch (type) {\n        case 'json':\n          // child is a tileset json\n          try {\n            let tileset = new TileSet(()=>this.updateCallback());\n            await tileset.load(url, this.styleParams);\n            this.children.push(tileset.root);\n            if (tileset.root) {\n              if (tileset.root.transform) {\n                tileset.root.totalContent.applyMatrix4(new THREE.Matrix4().fromArray(tileset.root.transform));\n              }\n              this.childContent.add(tileset.root.totalContent);\n            }\n          } catch (error) {\n            // load failed (wrong url? connection issues?)\n            // log error, do not break program flow\n            console.error(error);\n          }\n          break;\n        case 'b3dm':\n          try {\n            let loader = new THREE.GLTFLoader();\n            let b3dm = new B3DM(url);\n            let rotateX = new THREE.Matrix4().makeRotationAxis(new THREE.Vector3(1, 0, 0), Math.PI / 2);\n            this.tileContent.applyMatrix4(rotateX); // convert from GLTF Y-up to Z-up\n            let b3dmData = await b3dm.load();\n            loader.parse(b3dmData.glbData, this.resourcePath, (gltf) => {\n                //Add the batchtable to the userData since gltLoader doesn't deal with it\n                gltf.scene.children[0].userData = b3dmData.batchTableJson;\n                \n                gltf.scene.traverse(child => {\n                  if (child instanceof THREE.Mesh) {\n                    // some gltf has wrong bounding data, recompute here\n                    child.geometry.computeBoundingBox();\n                    child.geometry.computeBoundingSphere();\n                    child.material.depthWrite = true; // necessary for Velsen dataset?\n                  }\n                });\n                if (this.styleParams.color != null || this.styleParams.opacity != null) {\n                  let color = new THREE.Color(this.styleParams.color);\n                  gltf.scene.traverse(child => {\n                    if (child instanceof THREE.Mesh) {\n                      if (this.styleParams.color != null) \n                        child.material.color = color;\n                      if (this.styleParams.opacity != null) {\n                        child.material.opacity = this.styleParams.opacity;\n                        child.material.transparent = this.styleParams.opacity < 1.0 ? true : false;\n                      }\n                    }\n                  });\n                }\n                if (this.debugColor) {\n                  gltf.scene.traverse(child => {\n                    if (child instanceof THREE.Mesh) {\n                      child.material.color = this.debugColor;\n                    }\n                  })\n                }\n                this.tileContent.add(gltf.scene);\n              }, (error) => {\n                throw new Error('error parsing gltf: ' + error);\n              }\n            );\n          } catch (error) {\n            console.error(error);\n          }\n          break;\n        case 'pnts':\n          try {\n            let pnts = new PNTS(url);\n            let pointData = await pnts.load();            \n            let geometry = new THREE.BufferGeometry();\n            geometry.setAttribute('position', new THREE.Float32BufferAttribute(pointData.points, 3));\n            let material = new THREE.PointsMaterial();\n            material.size = this.styleParams.pointsize != null ? this.styleParams.pointsize : 1.0;\n            if (this.styleParams.color) {\n              material.vertexColors = THREE.NoColors;\n              material.color = new THREE.Color(this.styleParams.color);\n              material.opacity = this.styleParams.opacity != null ? this.styleParams.opacity : 1.0;\n            } else if (pointData.rgba) {\n              geometry.setAttribute('color', new THREE.Float32BufferAttribute(pointData.rgba, 4));\n              material.vertexColors = THREE.VertexColors;\n            } else if (pointData.rgb) {\n              geometry.setAttribute('color', new THREE.Float32BufferAttribute(pointData.rgb, 3));\n              material.vertexColors = THREE.VertexColors;\n            }\n            this.tileContent.add(new THREE.Points( geometry, material ));\n            if (pointData.rtc_center) {\n              let c = pointData.rtc_center;\n              this.tileContent.applyMatrix4(new THREE.Matrix4().makeTranslation(c[0], c[1], c[2]));\n            }\n            this.tileContent.add(new THREE.Points( geometry, material ));\n          } catch (error) {\n            console.error(error);\n          }\n          break;\n        case 'i3dm':\n          throw new Error('i3dm tiles not yet implemented');\n          break;\n        case 'cmpt':\n          throw new Error('cmpt tiles not yet implemented');\n          break;\n        default:\n          throw new Error('invalid tile type: ' + type);\n      }\n    }\n    this.updateCallback();\n  }\n  unload(includeChildren) {\n    this.unloadedTileContent = true;\n    this.totalContent.remove(this.tileContent);\n\n    //this.tileContent.visible = false;\n    if (includeChildren) {\n      this.unloadedChildContent = true;\n      this.totalContent.remove(this.childContent);\n      //this.childContent.visible = false;\n    } else  {\n      if (this.unloadedChildContent) {\n        this.unloadedChildContent = false;\n        this.totalContent.add(this.childContent);\n      }\n    }\n    if (this.debugLine) {\n      this.totalContent.remove(this.debugLine);\n      this.unloadedDebugContent = true;\n    }\n    this.updateCallback();\n    // TODO: should we also free up memory?\n  }\n  checkLoad(frustum, cameraPosition) {\n\n    /*this.load();\n    for (let i=0; i<this.children.length;i++) {\n      this.children[i].checkLoad(frustum, cameraPosition);\n    }\n    return;\n    */\n\n    /*if (this.totalContent.parent.name === \"world\") {\n      this.totalContent.parent.updateMatrixWorld();\n    }*/\n    let transformedBox = this.box.clone();\n    transformedBox.applyMatrix4(this.totalContent.matrixWorld);\n    \n    // is this tile visible?\n    if (!frustum.intersectsBox(transformedBox)) {\n      this.unload(true);\n      return;\n    }\n    \n    let worldBox = this.box.clone().applyMatrix4(this.worldTransform);\n    let dist = worldBox.distanceToPoint(cameraPosition);\n    \n\n    //console.log(`dist: ${dist}, geometricError: ${this.geometricError}`);\n    // are we too far to render this tile?\n    if (this.geometricError > 0.0 && dist > this.geometricError * 50.0) {\n      this.unload(true);\n      return;\n    }\n    //console.log(`camPos: ${cameraPosition.z}, dist: ${dist}, geometricError: ${this.geometricError}`);\n    \n    // should we load this tile?\n    if (this.refine == 'REPLACE' && dist < this.geometricError * 20.0) {\n      this.unload(false);\n    } else {\n      this.load();\n    }\n    \n    \n    // should we load its children?\n    for (let i=0; i<this.children.length; i++) {\n      if (dist < this.geometricError * 20.0) {\n        this.children[i].checkLoad(frustum, cameraPosition);\n      } else {\n        this.children[i].unload(true);\n      }\n    }\n\n    /*\n    // below code loads tiles based on screenspace instead of geometricError,\n    // not sure yet which algorith is better so i'm leaving this code here for now\n    let sw = this.box.min.clone().project(camera);\n    let ne = this.box.max.clone().project(camera);      \n    let x1 = sw.x, x2 = ne.x;\n    let y1 = sw.y, y2 = ne.y;\n    let tilespace = Math.sqrt((x2 - x1)*(x2 - x1) + (y2 - y1)*(y2 - y1)); // distance in screen space\n    \n    if (tilespace < 0.2) {\n      this.unload();\n    }\n    // do nothing between 0.2 and 0.25 to avoid excessive tile loading/unloading\n    else if (tilespace > 0.25) {\n      this.load();\n      this.children.forEach(child => {\n        child.checkLoad(camera);\n      });\n    }*/\n    \n  }\n}\n\nclass TileLoader {\n  // This class contains the common code to load tile content, such as b3dm and pnts files.\n  // It is not to be used directly. Instead, subclasses are used to implement specific \n  // content loaders for different tile types.\n  constructor(url) {\n    this.url = url;\n    this.type = url.slice(-4);\n    this.version = null;\n    this.byteLength = null;\n    this.featureTableJSON = null;\n    this.featureTableBinary = null;\n    this.batchTableJson = null;\n    this.batchTableBinary = null;\n    this.binaryData = null;\n  }\n  // TileLoader.load\n  async load() {\n    let response = await fetch(this.url)            \n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status} - ${response.statusText}`);\n    }\n    let buffer = await response.arrayBuffer();\n    let res = this.parseResponse(buffer);\n    return res;\n  }\n  parseResponse(buffer) {\n    let header = new Uint32Array(buffer.slice(0, 28));\n    let decoder = new TextDecoder();\n    let magic = decoder.decode(new Uint8Array(buffer.slice(0, 4)));\n    if (magic != this.type) {\n      throw new Error(`Invalid magic string, expected '${this.type}', got '${this.magic}'`);\n    }\n    this.version = header[1];\n    this.byteLength = header[2];\n    let featureTableJSONByteLength = header[3];\n    let featureTableBinaryByteLength = header[4];\n    let batchTableJsonByteLength = header[5];\n    let batchTableBinaryByteLength = header[6];\n    \n    /*\n    console.log('magic: ' + magic);\n    console.log('version: ' + this.version);\n    console.log('featureTableJSONByteLength: ' + featureTableJSONByteLength);\n    console.log('featureTableBinaryByteLength: ' + featureTableBinaryByteLength);\n    console.log('batchTableJsonByteLength: ' + batchTableJsonByteLength);\n    console.log('batchTableBinaryByteLength: ' + batchTableBinaryByteLength);\n    */\n    \n    let pos = 28; // header length\n    if (featureTableJSONByteLength > 0) {\n      this.featureTableJSON = JSON.parse(decoder.decode(new Uint8Array(buffer.slice(pos, pos+featureTableJSONByteLength))));\n      pos += featureTableJSONByteLength;\n    } else {\n      this.featureTableJSON = {};\n    }\n    this.featureTableBinary = buffer.slice(pos, pos+featureTableBinaryByteLength);\n    pos += featureTableBinaryByteLength;\n    if (batchTableJsonByteLength > 0) {\n      this.batchTableJson = JSON.parse(decoder.decode(new Uint8Array(buffer.slice(pos, pos+batchTableJsonByteLength))));\n      pos += batchTableJsonByteLength;\n    } else {\n      this.batchTableJson = {};\n    }\n    this.batchTableBinary = buffer.slice(pos, pos+batchTableBinaryByteLength);\n    pos += batchTableBinaryByteLength;\n    this.binaryData = buffer.slice(pos);\n    return this;\n  }\n}\n  \nclass B3DM extends TileLoader {\n  constructor(url) {\n    super(url);\n    this.glbData = null;\n  }\n  parseResponse(buffer) {\n    super.parseResponse(buffer);\n    this.glbData = this.binaryData;\n    return this;\n  }\n}\n\nclass PNTS extends TileLoader{\n  constructor(url) {\n    super(url);\n    this.points = new Float32Array();\n    this.rgba = null;\n    this.rgb = null;\n  }\n  parseResponse(buffer) {\n    super.parseResponse(buffer);\n    if (this.featureTableJSON.POINTS_LENGTH && this.featureTableJSON.POSITION) {\n      let len = this.featureTableJSON.POINTS_LENGTH;\n      let pos = this.featureTableJSON.POSITION.byteOffset;\n      this.points = new Float32Array(this.featureTableBinary.slice(pos, pos + len * Float32Array.BYTES_PER_ELEMENT * 3));\n      this.rtc_center = this.featureTableJSON.RTC_CENTER;\n      if (this.featureTableJSON.RGBA) {\n        pos = this.featureTableJSON.RGBA.byteOffset;\n        let colorInts = new Uint8Array(this.featureTableBinary.slice(pos, pos + len * Uint8Array.BYTES_PER_ELEMENT * 4));\n        let rgba = new Float32Array(colorInts.length);\n        for (let i=0; i<colorInts.length; i++) {\n          rgba[i] = colorInts[i] / 255.0;\n        }\n        this.rgba = rgba;\n      } else if (this.featureTableJSON.RGB) {\n        pos = this.featureTableJSON.RGB.byteOffset;\n        let colorInts = new Uint8Array(this.featureTableBinary.slice(pos, pos + len * Uint8Array.BYTES_PER_ELEMENT * 3));\n        let rgb = new Float32Array(colorInts.length);\n        for (let i=0; i<colorInts.length; i++) {\n          rgb[i] = colorInts[i] / 255.0;\n        }\n        this.rgb = rgb;\n      } else if (this.featureTableJSON.RGB565) {\n        console.error('RGB565 is currently not supported in pointcloud tiles.')\n      }\n    }\n    return this;\n  }\n}\n  \nclass Layer {\n  constructor (params) {\n    if (!params) throw new Error('parameters missing for mapbox 3D tiles layer');\n    if (!params.id) throw new Error('id parameter missing for mapbox 3D tiles layer');\n    if (!params.url) throw new Error('url parameter missing for mapbox 3D tiles layer');\n    \n    this.id = params.id,\n    this.url = params.url;\n    this.styleParams = {};\n    if ('color' in params) this.styleParams.color = params.color;\n    if ('opacity' in params) this.styleParams.opacity = params.opacity;\n    if ('pointsize' in params) this.styleParams.pointsize = params.pointsize;\n\n    this.loadStatus = 0;\n    this.viewProjectionMatrix = null;\n    \n    this.type = 'custom';\n    this.renderingMode = '3d';\n  }\n  LightsArray() {\n    const arr = [];\n    let directionalLight1 = new THREE.DirectionalLight(0xffffff);\n    directionalLight1.position.set(0.5, 1, 0.5).normalize();\n    let target = directionalLight1.target.position.set(100000000, 1000000000, 0).normalize();\n    arr.push(directionalLight1);\n\n    let directionalLight2 = new THREE.DirectionalLight(0xffffff);\n    //directionalLight2.position.set(0, 70, 100).normalize();\n    directionalLight2.position.set(0.3, 0.3, 1).normalize();\n    arr.push(directionalLight2);\n\n    //arr.push(new THREE.DirectionalLightHelper( directionalLight1, 500));\n    //arr.push(new THREE.DirectionalLightHelper( directionalLight2, 500));     \n\n          //this.scene.background = new THREE.Color( 0xaaaaaa );\n          //this.scene.add( new THREE.DirectionalLight() );\n          //this.scene.add( new THREE.HemisphereLight() );\n    return arr;\n  }\n  loadVisibleTiles() {\n    if (this.tileset.root) {\n      //console.log(`map width: ${this.map.transform.width}, height: ${this.map.transform.height}`);\n      //console.log(`Basegeometric error: ${40000000/(512*Math.pow(2,this.map.getZoom()))}`)\n      this.tileset.root.checkLoad(this.cameraSync.frustum, this.cameraSync.cameraPosition);\n    }\n  }\n  onAdd(map, gl) {\n    this.map = map;\n    const fov = 36.8;\n    const aspect = map.getCanvas().width/map.getCanvas().height;\n    const near = 0.000000000001;\n    const far = Infinity;\n    // create perspective camera, parameters reinitialized by CameraSync\n    this.camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n\n    this.mapQueryRenderedFeatures = map.queryRenderedFeatures.bind(this.map);\n    this.map.queryRenderedFeatures = this.queryRenderedFeatures.bind(this);\n          \n    this.scene = new THREE.Scene();\n    this.rootTransform = [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];\n    let lightsarray = this.LightsArray();\n    lightsarray.forEach(light=>{\n      this.scene.add(light);\n    });\n    this.world = new THREE.Group();\n    this.world.name = 'flatMercatorWorld';\n    this.scene.add(this.world);\n\n    this.renderer = new THREE.WebGLRenderer({\n      alpha: true, \n      antialias: true, \n      canvas: map.getCanvas(),\n      context: gl\n    });\n    this.renderer.shadowMap.enabled = true;\n    this.renderer.autoClear = false;\n\n    this.cameraSync = new CameraSync(this.map, this.camera, this.world);\n    this.cameraSync.updateCallback = ()=>this.loadVisibleTiles();\n    \n    //raycaster for mouse events\n    this.raycaster = new THREE.Raycaster();\n    this.tileset = new TileSet(()=>this.map.triggerRepaint());\n    this.tileset.load(this.url, this.styleParams).then(()=>{\n      if (this.tileset.root) {\n        this.world.add(this.tileset.root.totalContent);\n        this.world.updateMatrixWorld();\n        this.loadStatus = 1;\n        this.loadVisibleTiles();\n      }\n    }).catch(error=>{\n      console.error(`${error} (${this.url})`);\n    })\n  }\n  onRemove(map, gl) {\n    // todo: (much) more cleanup?\n    this.map.queryRenderedFeatures = this.mapQueryRenderedFeatures;\n    this.cameraSync = null;\n  }\n  queryRenderedFeatures(geometry, options){\n    let result = this.mapQueryRenderedFeatures(geometry, options);\n    if (!this.map || !this.map.transform) {\n      return result;\n    }\n    if (!(options && options.layers && !options.layers.includes(this.id))) {\n      if (geometry && geometry.x && geometry.y) {     \n        var mouse = new THREE.Vector2();\n        \n        // // scale mouse pixel position to a percentage of the screen's width and height\n        mouse.x = ( geometry.x / this.map.transform.width ) * 2 - 1;\n        mouse.y = 1 - ( geometry.y / this.map.transform.height ) * 2;\n\n        this.raycaster.setFromCamera(mouse, this.camera);\n\n        // calculate objects intersecting the picking ray\n        let intersects = this.raycaster.intersectObjects(this.world.children, true);\n        if (intersects.length) {\n          let feature = {\n            \"type\": \"Feature\",\n            \"properties\" : {},\n            \"geometry\" :{},\n            \"layer\": {\"id\": this.id, \"type\": \"custom 3d\"},\n            \"source\": this.url,\n            \"source-layer\": null,\n            \"state\": {}\n          }\n          let propertyIndex;\n          let intersect = intersects[0];\n          if (intersect.object && intersect.object.geometry && \n              intersect.object.geometry.attributes && \n              intersect.object.geometry.attributes._batchid) {\n            let geometry = intersect.object.geometry;\n            let vertexIdx = intersect.faceIndex;\n            if (geometry.index) {\n              // indexed BufferGeometry\n              vertexIdx = geometry.index.array[intersect.faceIndex*3];\n              propertyIndex = geometry.attributes._batchid.data.array[vertexIdx*7+6]\n            } else {\n              // un-indexed BufferGeometry\n              propertyIndex = geometry.attributes._batchid.array[vertexIdx*3];\n            }            \n            let keys = Object.keys(intersect.object.parent.userData);\n            if (keys.length) {\n              for (let propertyName of keys) {\n                feature.properties[propertyName] = intersect.object.parent.userData[propertyName][propertyIndex];\n              }\n            } else {\n              feature.properties.batchId = propertyIndex;\n            }\n          } else {\n            if (intersect.index != null) {\n              feature.properties.index = intersect.index;\n            } else {\n              feature.properties.name = this.id;\n            }\n          }\n          if (options.outline != false && (intersect.object !== this.outlinedObject || \n              (propertyIndex != null && propertyIndex !== this.outlinePropertyIndex) \n                || (propertyIndex == null && intersect.index !== this.outlineIndex))) {\n            // update outline\n            if (this.outlineMesh) {\n              let parent = this.outlineMesh.parent;\n              parent.remove(this.outlineMesh);\n              this.outlineMesh = null;\n            }\n            this.outlinePropertyIndex = propertyIndex;\n            this.outlineIndex = intersect.index;\n            if (intersect.object instanceof THREE.Mesh) {\n              this.outlinedObject = intersect.object;\n              let outlineMaterial = new THREE.MeshBasicMaterial({color: options.outlineColor? options.outlineColor : 0xff0000, wireframe: true});\n              let outlineMesh;\n              if (intersect.object && \n                  intersect.object.geometry && \n                  intersect.object.geometry.attributes && \n                  intersect.object.geometry.attributes._batchid) {\n                // create new geometry from faces that have same _batchid\n                let geometry = intersect.object.geometry;\n                if (geometry.index) {\n                  let ip1 = geometry.index.array[intersect.faceIndex*3];\n                  let idx = geometry.attributes._batchid.data.array[ip1*7+6];\n                  let blockFaces = [];\n                  for (let faceIndex = 0; faceIndex < geometry.index.array.length; faceIndex += 3) {\n                    let p1 = geometry.index.array[faceIndex];\n                    if (geometry.attributes._batchid.data.array[p1*7+6] === idx) {\n                      let p2 = geometry.index.array[faceIndex+1];\n                      if (geometry.attributes._batchid.data.array[p2*7+6] === idx) {\n                        let p3 = geometry.index.array[faceIndex+2];\n                        if (geometry.attributes._batchid.data.array[p3*7+6] === idx) {\n                          blockFaces.push(faceIndex);\n                        }\n                      }\n                    }\n                  }  \n                  let highLightGeometry = new THREE.Geometry(); \n                  for (let vertexCount = 0, face = 0; face < blockFaces.length; face++) {\n                    let faceIndex = blockFaces[face];\n                    let p1 = geometry.index.array[faceIndex];\n                    let p2 = geometry.index.array[faceIndex+1];\n                    let p3 = geometry.index.array[faceIndex+2];\n                    let positions = geometry.attributes.position.data.array;\n                    highLightGeometry.vertices.push(\n                      new THREE.Vector3(positions[p1*7], positions[p1*7+1], positions[p1*7+2]),\n                      new THREE.Vector3(positions[p2*7], positions[p2*7+1], positions[p2*7+2]),\n                      new THREE.Vector3(positions[p3*7], positions[p3*7+1], positions[p3*7+2]),\n                    )\n                    highLightGeometry.faces.push(new THREE.Face3(vertexCount, vertexCount+1, vertexCount+2));\n                    vertexCount += 3;\n                  }\n                  highLightGeometry.computeBoundingSphere();\n                  outlineMesh = new THREE.Mesh(highLightGeometry, outlineMaterial);\n                } else {\n                  let ip1 = intersect.faceIndex*3;\n                  let idx = geometry.attributes._batchid.array[ip1];\n                  let blockFaces = [];\n                  for (let faceIndex = 0; faceIndex < geometry.attributes._batchid.array.length; faceIndex += 3) {\n                    let p1 = faceIndex;\n                    if (geometry.attributes._batchid.array[p1] === idx) {\n                      let p2 = faceIndex + 1;\n                      if (geometry.attributes._batchid.array[p2] === idx) {\n                        let p3 = faceIndex + 2;\n                        if (geometry.attributes._batchid.array[p3] === idx) {\n                          blockFaces.push(faceIndex);\n                        }\n                      }\n                    }\n                  }\n                  let highLightGeometry = new THREE.Geometry(); \n                  for (let vertexCount = 0, face = 0; face < blockFaces.length; face++) {\n                    let faceIndex = blockFaces[face] * 3;\n                    let positions = geometry.attributes.position.array;\n                    highLightGeometry.vertices.push(\n                      new THREE.Vector3(positions[faceIndex], positions[faceIndex+1], positions[faceIndex+2]),\n                      new THREE.Vector3(positions[faceIndex+3], positions[faceIndex+4], positions[faceIndex+5]),\n                      new THREE.Vector3(positions[faceIndex+6], positions[faceIndex+7], positions[faceIndex+8]),\n                    )\n                    highLightGeometry.faces.push(new THREE.Face3(vertexCount, vertexCount+1, vertexCount+2));\n                    vertexCount += 3;\n                  }\n                  highLightGeometry.computeBoundingSphere();   \n                  outlineMesh = new THREE.Mesh(highLightGeometry, outlineMaterial);\n                }\n              } else {\n                outlineMesh = new THREE.Mesh(this.outlinedObject.geometry, outlineMaterial);\n              }\n              outlineMesh.position.x = this.outlinedObject.position.x+0.1;\n              outlineMesh.position.y = this.outlinedObject.position.y+0.1;\n              outlineMesh.position.z = this.outlinedObject.position.z+0.1;\n              outlineMesh.quaternion.copy(this.outlinedObject.quaternion);\n              outlineMesh.scale.copy(this.outlinedObject.scale);\n              outlineMesh.matrix.copy(this.outlinedObject.matrix);\n              outlineMesh.raycast = () =>{};\n              outlineMesh.name = \"outline\";\n              outlineMesh.wireframe = true;\n              this.outlinedObject.parent.add(outlineMesh);\n              this.outlineMesh = outlineMesh;\n            }\n          }\n          result.unshift(feature);\n          this.map.triggerRepaint();\n        } else {\n          this.outlinedObject = null;\n          if (this.outlineMesh) {\n            let parent = this.outlineMesh.parent;\n            parent.remove(this.outlineMesh);\n            this.outlineMesh = null;\n            this.map.triggerRepaint();\n          }\n        }\n      }\n    }\n    return result;\n  }\n  _update() {\n    this.renderer.state.reset();\n    this.renderer.render (this.scene, this.camera);\n    \n    \n    /*if (this.loadStatus == 1) { // first render after root tile is loaded\n      this.loadStatus = 2;\n      let frustum = new THREE.Frustum();\n      frustum.setFromProjectionMatrix(new THREE.Matrix4().multiplyMatrices(this.camera.projectionMatrix, this.camera.matrixWorldInverse));\n      if (this.tileset.root) {\n        this.tileset.root.checkLoad(frustum, this.getCameraPosition());\n      }\n    }*/\n  }\n  update() {\n    requestAnimationFrame(()=>this._update());\n  }\n  render(gl, viewProjectionMatrix) {\n    this._update();\n  }\n}\n\nclass Mapbox3DTiles {\n  \n  static projectedUnitsPerMeter(latitude) {\n    let c = ThreeboxConstants;\n    return Math.abs( c.WORLD_SIZE / Math.cos( c.DEG2RAD * latitude ) / c.EARTH_CIRCUMFERENCE );\n  }\n  static projectToWorld(coords) {\n    // Spherical mercator forward projection, re-scaling to WORLD_SIZE\n    let c = ThreeboxConstants;\n    var projected = [\n        c.MERCATOR_A * c.DEG2RAD * coords[0] * c.PROJECTION_WORLD_SIZE,\n        c.MERCATOR_A * Math.log(Math.tan((Math.PI*0.25) + (0.5 * c.DEG2RAD * coords[1]) )) * c.PROJECTION_WORLD_SIZE\n    ];\n \n    //z dimension, defaulting to 0 if not provided\n    if (!coords[2]) {\n      projected.push(0)\n    } else {\n        var pixelsPerMeter = projectedUnitsPerMeter(coords[1]);\n        projected.push( coords[2] * pixelsPerMeter );\n    }\n\n    var result = new THREE.Vector3(projected[0], projected[1], projected[2]);\n\n    return result;\n  }\n}\n\nMapbox3DTiles.Layer = Layer;\n\nexport {Mapbox3DTiles}"],"names":[],"mappings":"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"}